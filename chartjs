import { Component, Input, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';
import { PrimeControl } from '../../models/primeControl';
import { Chart } from 'chart.js';

@Component({
	selector: 'prime-chart',
	templateUrl: './prime-chart.component.html'
})
export class PrimeChartComponent extends PrimeControl {

	@ViewChild('ref') ref: ElementRef<HTMLCanvasElement>;

	myChart: any;
	myData: any;
	myOptions: any;
	node: any;

	private colorsDefault = [
		/*"#E6B3BB",
		"#D98C8C",
		"#CC7766",
		"#D9A68C",
		"#D9B28C",
		"#D9BF8C",
		"#D9CC8C",
		"#D9D98C",
		"#C2C99C",
		"#BAC99C",*/
		"#B2C99C",
		"#ABC99C",
		"#B3E6CC",
		"#B8E0D3",
		"#B3E6E6",
		"#94C7D1",
		"#94BDD1",
		"#9CB2C9",
		"#B8C5E0",
		"#B8B8E0",
		"#9E94D1",
		"#A894D1",
		"#BA9CC9",
		"#D194B2",
		"#A65973",
		"#E6B3CB",
		"#D98CRC",
		"#CC7796",
		"#D9A61C",
		"#D9B27C",
		"#D9BF7C",
		"#D9CC5C",
		"#D9D90C",
		"#C2C9AC",
		"#BAC95C",
		"#B2C96C",
		"#ABC9DC",
		"#B3E6CC",
		"#B8E0C3",
		"#B3E6A6",
		"#94C7A1",
		"#94BDA1",
		"#9CB2E9",
		"#B8C5A0",
		"#B8B8D0",
		"#9E94E1",
		"#A894A1",
		"#BA9CA9",
		"#D194C2",
		"#A659B3",
		"#A659A3"];

	private TYPES = {
		'torta': 'pie', 'barra': 'bar', 'barraHorizontal': 'horizontalBar', 'dona': 'doughnut',
		'linea': 'line', 'radar': 'radar', 'area': 'polarArea'
	};

	private renglonSelected: any;

	modoSoloGrafico: boolean = false;

	@Output()
	public onSelected = new EventEmitter<{ id: number, label: string, value: number }>();

	@Input()
	type: 'torta' | 'barra' | 'barraHorizontal' | 'dona' | 'linea' | 'radar' | 'area' = 'barra';

	@Input()
	labels: string[];

	@Input()
	label: string = '';

	@Input()
	title: string = '';

	private _dataSet: Array<{ id: any, label: string, value: number }>;
	@Input()
	set dataSet(value: Array<{ id: any, label: string, value: number }>) {
		this._dataSet = value;
		if (this.myChart != null) {
			this.initializeChart();
		}
	}
	get dataSet(): Array<{ id: any, label: string, value: number }> {
		return this._dataSet;
	}

	@Input()
	colors: string[] = this.colorsDefault;

	@Input()
	width: number = 300;

	@Input()
	height: number = 150;

	@Input()
	escalaHorizontalDisplay: boolean = false;

	@Input()
	escalaVerticalDisplay: boolean = false;

	@Input()
	labelDisplay: boolean = false;

	@Input()
	labelPosition: string = 'top';

	@Input()
	cartesianHidden: boolean = true;

	@Input()
	legendDisplay: boolean = false;

	@Input()
	classGrafico: string;

	@Input()
	fullToolTip: boolean = true;

	primeInit(): void {
		this.node = this.ref.nativeElement;

		this.setModoGrafico();

		if (this.dataSet) {
			let dataSetLabels: Array<string> = this.getLabels();
			let dataSetValues: Array<number> = this.getValues();

			this.height = this.setHeight(dataSetValues.length);

			let _this = this;

			let colores: string[] = [];
			while (colores.length < this.dataSet.length) colores = colores.concat(this.colors);
			this.colors = colores;

			this.myData = {
				labels: dataSetLabels,
				datasets: [{
					label: this.label,
					data: dataSetValues,
					backgroundColor: this.colors,
					fill: false,
				}]
			};

			this.myOptions = {

				elements: {
					arc: {
						borderWidth: 0,
					}
				},
				responsive: true,
				maintainAspectRatio: false,
				cutoutPercentage: this.type == 'dona' ? 80 : null,
				title: {
					text: this.title,
					display: this.title != '' ? true : false,
				},
				legend: {
					display: false,
					position: this.labelPosition
				},
				'onClick': function (evt, item) {
					if (item) {
						_this.onElementClick(evt, item);
					}
				},
				'onHover': function (evt, item) {
					if (item) {
						_this.onElementMouseUp(evt, item);
					}
				},

				scales: this.cartesianHidden ? {} : {
					yAxes: [{
						barPercentage: 0.5,
						ticks: {
							display: this.escalaVerticalDisplay,
							min: 0,
						}
					}],
					xAxes: [{
						barPercentage: 0.5,
						ticks: {
							display: this.escalaHorizontalDisplay,
							min: 0,
						}
					}]
				},
				tooltips: this.fullToolTip ? {} : {
					callbacks: {
						label: function (tooltipItem, data) {
							return data['datasets'][0]['data'][tooltipItem['index']];
						},
					}
				}
			};

			this.myChart = new Chart(this.node, {
				type: this.TYPES[this.type],
				data: this.myData,
				options: this.myOptions,
			});
		}
	}

	private initializeChart(): void {

		let dataSetLabels: Array<string> = this.getLabels();
		let dataSetValues: Array<number> = this.getValues();

		this.height = this.setHeight(dataSetValues.length);

		this.myData = {
			labels: dataSetLabels,
			datasets: [{
				label: this.label,
				data: dataSetValues,
				backgroundColor: this.colors,
				fill: false,
			}]
		};

		this.myChart.data = this.myData;
		this.myChart.update();
	}

	onElementClick(evt, item) {
		if (item[0]) {
			let el = this.dataSet[item[0]._index];
			this.onSelected.emit({ id: el.id, label: el.label, value: el.value });
		}
	}

	onElementMouseUp(evt, item) {
		this.renglonSelected = null;
		if (item[0]) {
			this.renglonSelected = this.dataSet[item[0]._index];
		}
	}

	isRenglonSelected(value: { id: any, label: string, value: number }) {
		return value == this.renglonSelected;
	}

	marcarRenglon(value: { id: any, label: string, value: number }) {
		this.renglonSelected = value;
	}

	desmarcarRenglon(value: { id: any, label: string, value: number }) {
		this.renglonSelected = null;
	}

	selectRenglon(value: { id: any, label: string, value: number }) {
		this.renglonSelected = value;
		this.onSelected.emit(value);
	}

	private getLabels(): string[] {
		let labs: string[] = [];
		if (this.dataSet) {
			this.dataSet.forEach(element => {
				labs.push(element.label)
			});
		}
		return labs;
	}

	private getValues(): number[] {
		let vals: number[] = [];
		if (this.dataSet) {
			this.dataSet.forEach(element => {
				vals.push(element.value)
			});
		}
		return vals;
	}

	private setHeight(value: number): number {
		switch (this.type) {
			case 'barraHorizontal':
				return (50 + (30 * value));
				break;
			default:
				if (this.height > 150)
					return this.height;
				else
					return 150;
				break;
		}
	}

	private setModoGrafico() {

		if (this.labelDisplay) {
			switch (this.type) {
				case 'dona':
					this.modoSoloGrafico = false;
					break;
				case 'torta':
					this.modoSoloGrafico = false;
					break;
				case 'area':
					this.modoSoloGrafico = false;
					break;
				case 'radar':
					this.modoSoloGrafico = false;
					break;
				default:
					this.modoSoloGrafico = true;
					break;
			}
		}
		else {
			this.modoSoloGrafico = true;
		}
	}

}
